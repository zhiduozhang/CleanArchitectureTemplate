name: Build & Deploy
on:
  push:
    branches: [ main ]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_HOST: postgres
          POSTGRES_DB: securetary
        options: >-
          --health-cmd pg_isready   
          --health-interval 10s 
          --health-timeout 5s
          --health-retries 5
        ports:
          # Maps tcp port 5432 on service container to the host
          - 5432:5432

    steps:
      - uses: actions/checkout@v3
      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.x'
          include-prerelease: true
      - name: Restore
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore --configuration Release
      - name: Test
        run: >-
          dotnet test --no-build --configuration Release --filter
          "FullyQualifiedName!~AcceptanceTests"
        env:
          ConnectionStrings__DefaultConnection: >-
            Server=localhost;Port=5432;Database=postgres;User Id=postgres;Password=postgres;
      - name: Publish
        run: dotnet publish src/WebUI/WebUI.csproj --configuration Release --output website
      - name: Copy AWS Deployment Manifest
        run: cp aws-windows-deployment-manifest.json /home/runner/work/CleanArchitectureTemplate/CleanArchitectureTemplate/website/aws-windows-deployment-manifest.json
      - name: Create ZIP deployment package
        run: cd /home/runner/work/CleanArchitectureTemplate/CleanArchitectureTemplate/website/ && zip -r ~/deploy_package.zip .
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Upload package to S3 bucket
        run: aws s3 cp ~/deploy_package.zip s3://dotnet-cleanarchitecture-eb-artefacts/${{ github.sha }}.zip
  deploy-staging:
    needs: build
    runs-on: ubuntu-latest

    environment:
      name: staging
      url: ${{ steps.deploywebapp.outputs.webapp-url }}
      
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Create new ElasticBeanstalk Application Version
        run: |
          aws elasticbeanstalk create-application-version \
          --application-name cleanarchitecture-template \
          --source-bundle S3Bucket="dotnet-cleanarchitecture-eb-artefacts",S3Key="${{ github.sha }}.zip" \
          --version-label "ver-${{ github.sha }}" \
          --description "commit-sha-${{ github.sha }}"

      - name: Deploy new ElasticBeanstalk Application Version
        run: aws elasticbeanstalk update-environment --environment-name  cleanarchitecture-staging --version-label "ver-${{ github.sha }}"